<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[kkdev163 ' Blog]]></title><description><![CDATA[kkdev163]]></description><link>https://kkdev163.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sat, 30 Sep 2023 03:41:44 GMT</lastBuildDate><item><title><![CDATA[ES(ElasticSearch) 搜索基本概念简介]]></title><description><![CDATA[ES 的存储类型 ES 的存储类型大致分为两类 结构化数据 类型为 keyword、date、long、boolean 等 文本数据 类型为 text 存储索引建立规则： ES在存储结构化数据类型时，会将数据作为一个整体建立倒排索引。 ES…]]></description><link>https://kkdev163.github.io/elastic-search/</link><guid isPermaLink="false">https://kkdev163.github.io/elastic-search/</guid><pubDate>Thu, 02 Apr 2020 10:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;ES 的存储类型&lt;/h3&gt;
&lt;p&gt;ES 的存储类型大致分为两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构化数据 类型为 keyword、date、long、boolean 等&lt;/li&gt;
&lt;li&gt;文本数据 类型为 text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储索引建立规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES在存储结构化数据类型时，会将数据作为一个整体建立倒排索引。&lt;/li&gt;
&lt;li&gt;ES在存储文本数据类型时，会将文本先进行分词处理，然后按各个单独的词项建立倒排索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例来说：&lt;/p&gt;
&lt;p&gt;假设索引字段的定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段名&lt;/th&gt;
&lt;th&gt;字段类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;appName&lt;/td&gt;
&lt;td&gt;keyword&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当插入以下两条数据时&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;appName&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;App Store&lt;/td&gt;
&lt;td&gt;App Store is Awesome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Apple Store&lt;/td&gt;
&lt;td&gt;Store Sell Apple Pie&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ES 会为 appName 字段建立如下的倒排索引：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;索引&lt;/th&gt;
&lt;th&gt;文档id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;App Store&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apple Store&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ES 会为 description 字段建立如下的倒排索引：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;索引&lt;/th&gt;
&lt;th&gt;文档id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;store&lt;/td&gt;
&lt;td&gt;1, 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;awesome&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sell&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apple&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pie&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：通用分词器会将词项转为小写&lt;/p&gt;
&lt;h3&gt;ES 的搜索&lt;/h3&gt;
&lt;p&gt;ES 的搜索分为两大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于词项的搜索(Term 搜索)&lt;/li&gt;
&lt;li&gt;基于全文的搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;基于词项的搜索&lt;/h4&gt;
&lt;p&gt;在进行基于词项的搜索，搜索词 与 文档字段需完全匹配。&lt;/p&gt;
&lt;p&gt;ES 提供了五种基于词项的搜索方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;term&lt;/li&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;exists&lt;/li&gt;
&lt;li&gt;prefix&lt;/li&gt;
&lt;li&gt;wildcard&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;DEMO 举例&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;appName&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;App Store&lt;/td&gt;
&lt;td&gt;App Store is Awesome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Apple Store&lt;/td&gt;
&lt;td&gt;Store Sell Apple Pie&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;query&amp;quot;: {
        &amp;quot;term&amp;quot;: {
            &amp;quot;appName&amp;quot;: &amp;quot;App Store&amp;quot; // 可搜索到
            // &amp;quot;appName&amp;quot;: &amp;quot;App&amp;quot;  // 无法搜索到
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;基于全文的搜索&lt;/h4&gt;
&lt;p&gt;ES 主要提供了两种基于全文的搜索方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;match&lt;/li&gt;
&lt;li&gt;match_phrase&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在进行 match 搜索时，ES 会先将查询字符串进行分词，然后将每个词项与倒排索引进行匹配，任意一个词项匹配到，即搜索成功。&lt;/p&gt;
&lt;p&gt;在进行 match_phrase 搜索时，ES 将查询字符串看作一个整体，只有文档中包含该短语字符串时，才搜索成功。&lt;/p&gt;
&lt;h5&gt;DEMO&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;appName&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;App Store&lt;/td&gt;
&lt;td&gt;App Store is Awesome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Apple Store&lt;/td&gt;
&lt;td&gt;Store Sell Apple Pie&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ES 会为 description 字段建立如下的倒排索引：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;索引&lt;/th&gt;
&lt;th&gt;文档id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;store&lt;/td&gt;
&lt;td&gt;1, 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;awesome&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sell&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apple&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pie&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;match 举例&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;query&amp;quot;: {
        &amp;quot;match&amp;quot;: {
            &amp;quot;description&amp;quot;: &amp;quot;App&amp;quot; // 可以搜到文档1
          //&amp;quot;description&amp;quot;: &amp;quot;App Store&amp;quot;  // 可以搜索到文档1，2 (会先将App Store分词, 通过 Store 搜到了文档2)
          //&amp;quot;description&amp;quot;: &amp;quot;App Awesome&amp;quot;  // 可以搜索到文档1 (还是进行了分词)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;match_phrase 举例&lt;/h5&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;query&amp;quot;: {
        &amp;quot;match_phrase&amp;quot;: {
            &amp;quot;description&amp;quot;: &amp;quot;App&amp;quot; // 搜到文档1
          //&amp;quot;description&amp;quot;: &amp;quot;App Store&amp;quot;  // 搜索文档1 (App Store是一个整体)
          //&amp;quot;description&amp;quot;: &amp;quot;App Awesome&amp;quot;  // 无法查到 (App Awesome是一个整体)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;复合查询&lt;/h3&gt;
&lt;p&gt;以上为单条件查询，但通常业务上需要基于多个条件进行查询，ES 提供了 bool 复合查询，该查询可以包含4个查询字句，分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must 必须全部符合该条件。贡献算分(算分可以简单理解为搜索的匹配度)&lt;/li&gt;
&lt;li&gt;should 符合条件之一即可。 贡献算分&lt;/li&gt;
&lt;li&gt;must_not 必须不符合该条件。 不贡献算分，有缓存优化&lt;/li&gt;
&lt;li&gt;filter 必须符合该条件。不贡献算分，有缓存优化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;query&amp;quot;: {
        &amp;quot;bool&amp;quot;: {
            &amp;quot;must&amp;quot;: [{  // 复合查询子句
                &amp;quot;term&amp;quot;: {  // 基于词项搜索
                    &amp;quot;appName&amp;quot;: &amp;quot;App Store&amp;quot;
                }
            }, {
                &amp;quot;range&amp;quot;: { // 基于词项的范围搜索
                    &amp;quot;time&amp;quot;: {
                        &amp;quot;lgt&amp;quot;: &amp;quot;2019-01-01&amp;quot;
                    }
                }
            }, {
                &amp;quot;wildcard&amp;quot;: { // 基于词项的通配符搜索
                    &amp;quot;appName&amp;quot;: &amp;quot;* Store&amp;quot; 
                }
            }, {
                &amp;quot;match&amp;quot;: { // 基于全文的 match 搜索
                    &amp;quot;description&amp;quot;: &amp;quot;App Store&amp;quot;
                }
            }, {
                &amp;quot;match_phrase&amp;quot;: { // 基于全文的 match_phrase 搜索
                    &amp;quot;description&amp;quot;: &amp;quot;App Store&amp;quot;
                }
            }]
            &amp;quot;should&amp;quot;: [{  // 复合查询子句
                ...
            }],
            &amp;quot;must_not&amp;quot;: [{ // 复合查询子句
                ...
            }],
            &amp;quot;filter&amp;quot;: [{ // 复合查询子句
                ...
            }]
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般情况下，在不需要算分的场景下，建议使用 filter 和 must_not, 因为不需要进行算分，ES 会有缓存优化。&lt;/p&gt;
&lt;p&gt;另外每一个查询字句，可以继续嵌套 bool 查询。示意如下:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;query&amp;quot;: {
        &amp;quot;bool&amp;quot;: {
            &amp;quot;must&amp;quot;: [{  
                &amp;quot;bool&amp;quot;: {  
                    &amp;quot;must&amp;quot;:{...},
                    &amp;quot;should&amp;quot;: {...},
                }
            }]
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于复合查询的 body 构造较为繁复，我们可以使用 &lt;a href=&quot;https://github.com/danpaz/bodybuilder&quot;&gt;bodybuilder&lt;/a&gt; 来简化这一过程。&lt;/p&gt;
&lt;p&gt;示意如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var body = bodybuilder().query(&amp;#39;match&amp;#39;, &amp;#39;message&amp;#39;, &amp;#39;this is a test&amp;#39;).build()
// body == {
//   query: {
//     match: {
//       message: &amp;#39;this is a test&amp;#39;
//     }
//   }
// }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;详细&lt;a href=&quot;https://bodybuilder.js.org/docs/&quot;&gt;API文档&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Lighthous 测试内幕]]></title><description><![CDATA[前言 云音乐前端性能监控平台，底层使用了 Lighthouse 进行审计评分，在实践过程中我们积累了一些 Lighthouse 内部实现的研究经验，希望通过这篇文章可以分享给各位读者。 本篇文章基于 Lighthouse 5.2.0 版本，介绍了 Lighthouse…]]></description><link>https://kkdev163.github.io/lighthouse/</link><guid isPermaLink="false">https://kkdev163.github.io/lighthouse/</guid><pubDate>Tue, 12 Nov 2019 10:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;云音乐前端性能监控平台，底层使用了 Lighthouse 进行审计评分，在实践过程中我们积累了一些 Lighthouse 内部实现的研究经验，希望通过这篇文章可以分享给各位读者。&lt;/p&gt;
&lt;p&gt;本篇文章基于 Lighthouse 5.2.0 版本，介绍了 Lighthouse 的测试流程、架构模块实现、性能指标的计算等。通过这篇文章，读者可以了解到 Lighthouse 是如何做自动化测试的、如何在 Lighthouse 的框架上自定义一些审计项、关键的性能指标是如何模拟计算的。&lt;/p&gt;
&lt;p&gt;本篇文章会按以下四个部分展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lighthouse 简介&lt;/li&gt;
&lt;li&gt;Lighthouse 测试流程&lt;/li&gt;
&lt;li&gt;Lighthouse 模块实现&lt;/li&gt;
&lt;li&gt;Lighthouse 性能指标计算&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lighthouse 简介&lt;/h2&gt;
&lt;p&gt;Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。只要为 Lighthouse 提供一个需要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。&lt;/p&gt;
&lt;h3&gt;Lighthouse 使用方式&lt;/h3&gt;
&lt;p&gt;目前官方提供了4种使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse#using-lighthouse-in-chrome-devtools&quot;&gt;Chrome 开发者工具（DevTools）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse#using-the-chrome-extension&quot;&gt;Chrome 扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse#using-the-node-cli&quot;&gt;Node CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse#using-the-node-module&quot;&gt;Node Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以 Chrome 开发者工具为例，在 Audits 面板下，用户可以配置测试平台、测试类目、限速方式等，可以方便快捷地发起一次测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/-zIauX-4uD9ZOETz8OGxaQ==/109951164295464779.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Lighthouse 测试报告&lt;/h3&gt;
&lt;p&gt;测试结束后，默认会生成 HTML 格式的报告，如下图所示，在报告中涵盖了 5 大类别（categories）的测试评分：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/aT_f3Y0FFCaR78J39Y3hfA==/109951164463170217.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;每个类别都包含一系列的审计项（audit），针对审计项的运行结果，Lighthouse 会给出特定的优化建议与诊断结果帮助开发者有针对性地进行优化。&lt;/p&gt;
&lt;p&gt;本节简要介绍了 Lighthouse 的使用方式与测试报告组成，下一节将介绍 Lighthouse 的测试流程。&lt;/p&gt;
&lt;h2&gt;Lighthouse 测试流程&lt;/h2&gt;
&lt;p&gt;我们以 Node CLI 的方式进行测试，分析 Lighthouse 的测试流程。&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse#using-the-node-cli&quot;&gt;官方文档&lt;/a&gt;，安装好 CLI 后，输入如下命令，可以进行一次测试&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;lighthouse --only-categories&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;performance https://google.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;注：以上命令只进行 performance 类别测试。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在 CLI 中会输出测试过程中的日志，截图显示如下，在日志中，可以看出测试大致分为如下几个阶段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/mqu093845jHPdnHDwxrfgg==/109951164463501007.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过输出的日志，可以画出 Lighthouse 的测试流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/Wka60Xl1kip0rBD8bia5lg==/109951164295505995.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lighthouse 与浏览器建立连接。&lt;/li&gt;
&lt;li&gt;测试的初始化配置与加载待测试页面。&lt;/li&gt;
&lt;li&gt;在页面加载过程中，运行一系列的采集器（gatherers），每个采集器都会收集自己的目标信息，并生成中间产物（artifacts）。&lt;/li&gt;
&lt;li&gt;运行一系列的审计项（audits），每个审计项都会从中间产物（artifacts）中获取所需的数据，计算出各自的评分。&lt;/li&gt;
&lt;li&gt;基于审计项的评分计算出大类的评分，汇总生成报告。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本节基于 Lighthouse 的测试日志，介绍了 Lighthouse 的测试流程，下节将介绍流程中的模块实现。&lt;/p&gt;
&lt;h2&gt;Lighthouse 模块实现&lt;/h2&gt;
&lt;p&gt;初步了解了基本的测试流程后，我们再看下官方给出的 &lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md&quot;&gt;Lighthouse 架构图&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/-A6wsG5KoXXe3-OS2XVeuQ==/109951164295515799.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;这张图中体现了测试的主要流程，从中也可以圈出 4 个主要模块，下文会对这几个模块做逐个讲解。&lt;/p&gt;
&lt;h3&gt;Driver 模块&lt;/h3&gt;
&lt;h4&gt;双向通信与 DevTools 协议&lt;/h4&gt;
&lt;p&gt;Chrome 浏览器在启动的时候，可以通过 &lt;code&gt;—remote-debugging-port&lt;/code&gt; 参数设置远程调试端口，如以下命令可以打开 Chrome 并设置远程调试端口为9222。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;chrome.exe --remote-debugging-port&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;9222&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后就可以使用地址 &lt;a href=&quot;http://localhost:9222&quot;&gt;http://localhost:9222&lt;/a&gt; 进行远程调试了，比如以下命令可以让 Chrome 浏览器打开一个新的 Tab。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; http://localhost:9222/json/new&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该命令还会返回此 Tab 的相关信息，其中需要关注的是 webSocketDebuggerUrl，这是该 Tab 的 WebSocket 连接地址。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;id&amp;quot;: &amp;quot;29989D...&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;about:blank&amp;quot;,
    &amp;quot;webSocketDebuggerUrl&amp;quot;: &amp;quot;ws://localhost:9222/devtools/page/29989D...&amp;quot;,
    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Driver 模块持有 Connection 实例（负责与浏览器进行通信），该实例在初始化的时候，正是通过调用远程调试端口的&lt;code&gt;/json/new&lt;/code&gt;指令打开一个新的 Tab，并使用返回的 webSocketDebuggerUrl 与浏览器建立 WebSocket 连接，之后就可以进行双向通信。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新开一个Tab&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/eaL2EXZEC08464rFBy9iaw==/109951164431973731.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;建立 WebSocket 连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/-VHhyIsGazg4bYE5M6nEDQ==/109951164431978136.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;双方建立 WebSocket 连接后，必须使用一种数据格式协议进行通信，该协议就是 Chrome DevTools Protocol，此协议以 JSON 为格式，定义指令的方法名与参数。&lt;/p&gt;
&lt;p&gt;如下图所示，发送 Page.navigate 指令可以让 Chrome 导航至目标页面。发送 Page.captureScreenshot 指令可以让 Chrome 生成当前页面的截图数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/5D-dM1H93qwmPbOpGHnfow==/109951164431993587.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在该协议的&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;文档&lt;/a&gt;中，所有的控制指令和事件被划分至多个领域（Domains）如 Page、Network 等。打开 Page 领域，可以找到示例指令 Page.navigate 的详细说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/v1z_OCF1Z2Hea9M0cEClvA==/109951164431998671.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了 navigate、captureScreenshot 等主动调用的指令外，当我们调用某个领域的 enable 指令后，后续就可以接收到该领域推送的通知事件。&lt;/p&gt;
&lt;p&gt;Lighthouse 通过 Chrome DevTools Protocol 定义的主动指令与事件通知，就实现了操控 Chrome 浏览器，和感知页面加载过程中的各个事件。&lt;/p&gt;
&lt;h4&gt;日志记录&lt;/h4&gt;
&lt;p&gt;Driver 模块中的另外2个重要实例是 DevtoolsLog、NetworkRecorder，他们用于将浏览器发出的通知事件进行结构化的存储。其中 DevtoolsLog 会记录各个领域的全量日志，NetworkRecorder 只存储网络相关日志，并会分析出当前网络请求状态（繁忙、空闲）等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/78-QQu4e5FhQhAOyA-nERQ==/109951164432038402.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;存储的日志信息将在后续的审计（Audits）模块中使用，下文会继续提到他们。&lt;/p&gt;
&lt;h4&gt;仿真器（emulation）&lt;/h4&gt;
&lt;p&gt;Driver 模块中最后值得一提的部分是仿真器（emulation），该模块的作用是模拟测试设备，如模拟 移动端 / PC 端、屏幕的尺寸，模拟设备的 UserAgent、Cookie、网络限速等。&lt;/p&gt;
&lt;p&gt;这些模拟功能的设置，也是通过 Connection 模块向 Chrome 浏览器发送对应领域的操控指令实现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/uEjOlxdk-Upp8CR-L0U9Qw==/109951164432060610.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;至此我们分析完了 Driver 模块的主要组成部分，我们来简单总结下：负责与浏览器的双向通信、记录事件日志、模拟器的设置等。&lt;/p&gt;
&lt;h3&gt;Gatherer 模块&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/jbY5zCRtP6Fj3ilVh2ahqg==/109951164432067289.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;该模块的一个重要概念是 pass，官方是这样定义 pass 的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;controls how to load the requested URL
and what information to gather about the page while loading.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即控制页面如何加载，并决定在页面加载过程中采集哪些信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;defines basic settings such as how long to wait for the page to load and whether to record a trace file. Additionally a list of gatherers to use is defined per pass. Gatherers can read information from the page to generate artifacts which are later used by audits to provide you with a Lighthouse report.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即定义页面加载等待时间、是否记录 trace 文件等配置。每个 pass 还定义了一个 gatherers 列表，gatherers 可以从页面中读取需要的信息并生成一个中间产物，
中间产物将会用于后续的审计分析，并最终生成测试报告。&lt;/p&gt;
&lt;p&gt;了解了 pass 的定义，来看一个具体的 pass 配置：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  passes&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    passName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;defaultPass&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    recordTrace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 是否记录Trace信息&lt;/span&gt;
    useThrottling&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 是否使用限速&lt;/span&gt;
    gatherers&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// gatherers列表&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;css-usage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;viewport-dimensions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;runtime-exceptions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;console-messages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;anchor-elements&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;image-elements&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;link-elements&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;meta-elements&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;script-elements&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;iframe-elements&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 省略&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 省略&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的 gatherers 是我们需要关注的重点，每一个 gatherer，在代码仓库中都有与之对应的同名实现文件，并且都继承自相同的父类 Gatherer，其中定义了三个模板方法，子类只需实现关心的模板方法即可。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Gatherer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 在页面导航前&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;beforePass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;passContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 在页面loaded后&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;passContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 在页面加载完毕，且trace信息收集完毕后&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;afterPass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;passContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loadData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以一个比较简单的 Gatherer 具体实现 RuntimeExceptions 为例，该实例实现了 beforePass 、afterPass 两个生命周期模板方法，其中 driver.on 正是通过上文介绍的 Driver 模块实现的事件监听。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Gatherer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./gatherer.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RuntimeExceptions&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Gatherer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_exceptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_onRuntimeExceptionThrown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onRuntimeExceptionThrown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onRuntimeExceptionThrown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_exceptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;token comment&quot;&gt;// 在页面导航前，注册事件监听器，采集错误信息&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;beforePass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;passContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; driver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; passContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Runtime.exceptionThrown&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_onRuntimeExceptionThrown&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 在页面加载完毕后，解除事件监听&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;afterPass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;passContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; passContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Runtime.exceptionThrown&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_onRuntimeExceptionThrown&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_exceptions&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了这个参考示例，我们也可以轻松地写一个自定义的 Gatherer，比如用于采集页面标题的 gatherer：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Gatherer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./gatherer.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPageTitle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PageTitle&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Gatherer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;afterPass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;passContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; passContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;evaluateAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;getPageTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;())`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们只重写了 afterPass 方法，在该生命中期中，将脚本通过 driver 模块发送给浏览器执行，并获取到执行结果。&lt;/p&gt;
&lt;p&gt;当 pass 中定义的所有 gatherers 运行完后，就会生成一个中间产物 artifacts，此后 Lighthouse 就可以断开与浏览器的连接，只使用 artifacts 进行后续的分析。&lt;/p&gt;
&lt;p&gt;总结下 Gatherer 模块，该模块会通过 pass 这个配置，定义页面如何加载，并运行配置的所有 gatherers 来采集页面加载过程中的信息，并生成中间产物 artifacts。有了 artifacts，就可以进入下一步的 Audits 模块。&lt;/p&gt;
&lt;h3&gt;Audits 模块&lt;/h3&gt;
&lt;p&gt;与 gatherers 类似，在配置文件中也会定义需要运行的 audits，每一个 audits 也都有与之对应的同名实现文件。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  audits&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;errors-in-console&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;metrics/first-contentful-paint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;metrics/first-meaningful-paint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;metrics/speed-index&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;metrics/first-cpu-idle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;metrics/interactive&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;screenshot-thumbnails&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;final-screenshot&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 省略&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 省略&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们还是从最为简单的 errors-in-console 入手，了解下一个 audit 是如何实现的。&lt;/p&gt;
&lt;p&gt;在每个 audit 中都会定义一个静态方法&lt;code&gt;meta()&lt;/code&gt;，对该 audit 进行描述，并声明所需的 artifacts，ErrorLogs 这项 audit 就声明了其需要上文提到的 RuntimeExceptions 所生成的中间产物。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ErrorLogs&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Audit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;errors-in-console&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      title&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;str_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UIStrings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      failureTitle&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;str_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UIStrings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;failureTitle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;str_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UIStrings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      requiredArtifacts&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ConsoleMessages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;RuntimeExceptions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Audit 实例需要实现的另一个模板方法是&lt;code&gt;audit()&lt;/code&gt;，在该方法中可以拿到所需的中间产物，并基于中间产物计算出本项 audit 的得分与详情。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;audit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 获取所需的中间产物&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; runtimeExceptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; artifacts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RuntimeExceptions&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 数据的过滤与转换&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; runtimeExRows &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      runtimeExceptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exceptionDetails &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exceptionDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exception &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
          entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exceptionDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exceptionDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          source&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Runtime.exception&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          description&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          url&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exceptionDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 省略表格详情生成代码&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 计算出审计项的得分&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; numErrors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tableRows&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      score&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numErrors &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      numericValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; numErrors&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      details&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了上面的示例，我们就可以参照实现一个自定义审计项，如审计页面标题：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PageTitle&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Audit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page-title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            title&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title of page document&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            failureTitle&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Does not have page title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;This audit get document.title when page loaded&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            requiredArtifacts&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;PageTitle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;audit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            score&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; artifacts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PageTitle &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            displayValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; artifacts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PageTitle &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;none&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当运行完配置文件中定义的所有审计项后，就得到了每个审计项的评分与详情，后续就进入 Report 模块。&lt;/p&gt;
&lt;h3&gt;Report 模块&lt;/h3&gt;
&lt;p&gt;在配置文件中，会定义每个测试类别所需的审计项，以及每个审计项所占的权重。如下所示的为性能（performance）这项测试类别所需的审计项：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;performance&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    title&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;str_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UIStrings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;performanceCategoryTitle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    auditRefs&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;first-contentful-paint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; group&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;metrics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;first-meaningful-paint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; group&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;metrics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;speed-index&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; group&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;metrics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;interactive&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; group&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;metrics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;first-cpu-idle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; group&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;metrics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;max-potential-fid&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; group&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;metrics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 省略&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在最终汇总阶段，Lighthouse 会基于该配置文件以及上一个环节中计算出的每个审计项的评分，加权计算出 performance 的评分。并基于每个审计项的评分与种类，将审计项划分为通过与不通过，对于不通过的审计项会给出详细的测试详情与优化指引。&lt;/p&gt;
&lt;h2&gt;FCP 等性能指标审计项的实现&lt;/h2&gt;
&lt;p&gt;在上文介绍整体测试流程的过程中，我选择了最为简单的审计项展开介绍，本节会挑选大家更为关心的性能审计指标如 FCP 展开介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FCP（First Contentful Paint） 首次内容绘制时间，是从页面导航开始，到浏览器从 DOM 中渲染出首个内容的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;限速模拟&lt;/h3&gt;
&lt;p&gt;由于页面性能受宿主机网络与 CPU 频率等参数的影响较大，Lighthouse 提供了三种方式供模拟较差的宿主机环境，其背后的逻辑是，如果页面能够在较差的环境下达到一个较好的测试分数、那么大部分用户对页面的直观感受都会较好。&lt;/p&gt;
&lt;p&gt;在 Chrome Devtools 的 Audits 面板中，可以看到三种限速方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/cRs259nIe70Tt5bhlph4TA==/109951164432290382.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图配置项分别对应下面三种限速方式的介绍&lt;/p&gt;
&lt;h4&gt;simulated&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Throttling is simulated, resulting in faster audit
runs with similar measurement accuracy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即限速是模拟的（加载页面时不进行限速，加载完页面后，模拟计算出在限速条件下的性能指标值），所以可以在较快的速度下地完成审计并有相似的测试精度。&lt;/p&gt;
&lt;h4&gt;devtools&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Typical DevTools throttling, with actual traffic shaping
and CPU slowdown applied&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即通过 DevTools 进行限速，页面是在一个真实受限的网络与降速 CPU 条件下加载的。&lt;/p&gt;
&lt;h4&gt;no throttling&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;No network or CPU throttling used.
(Useful when not evaluating performance)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即 Lighthouse 不进行额外的限速，通常在不进行性能测试、或开发者自行对宿主机进行限速时使用该项。&lt;/p&gt;
&lt;p&gt;在三种限速方式中，Lighthouse 真正对网络与 CPU 进行限速的只有 devtools 这种限速方式，实现的方式是通过上文提到的 Driver 模块发送对应领域的指令给 Chrome 浏览器：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 开启CPU限速&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;enableCPUThrottling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; throttlingSettings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; throttlingSettings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cpuSlowdownMultiplier&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Emulation.setCPUThrottlingRate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;rate&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 开启网络限速&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;enableNetworkThrottling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; throttlingSettings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 省略部分代码&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Network.emulateNetworkConditions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; conditions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Trace 信息&lt;/h3&gt;
&lt;p&gt;在上文介绍 pass 时，我们提到其中有一个参数用来控制是否收集 Trace 信息，Trace 信息是什么？它又有什么用呢？&lt;/p&gt;
&lt;p&gt;其实我们大部分同学都已经接触过 Trace 信息，它的可视化展示就在 Chrome devtools 中 Performance 面板：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/xJAmmSQiSuSLCiCSF6RVuw==/109951164432359102.png?imageView=1&amp;#x26;thumbnail=750x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这个可视化面板中，可以看到页面加载过程中关键渲染节点 FP、FCP、FMP 等，并可以看到主线程进行的 Parse HTML、Layout、JS 的执行依赖情况等。&lt;/p&gt;
&lt;p&gt;当 pass 中配置了开启收集 Trace 信息时，Lighthouse 在页面加载完毕后，就可以拿到完整的 Trace 信息， 从中可以知道页面加载时的 FCP、FMP 等关键渲染节点。&lt;/p&gt;
&lt;h3&gt;FCP 的模拟计算&lt;/h3&gt;
&lt;p&gt;当使用 devtools、no throttling 这两种方式进行限速时，由于页面就是在真实受限的网络条件下加载的，Trace 信息中给出的 FCP 值就是限速条件下的 FCP 值，所以 Lighthouse 无需进行任何额外的加工处理。&lt;/p&gt;
&lt;p&gt;但在 simulated 这种限速方式下，页面是在没有限速的条件下加载，所以 Trace 中的 FCP 是不限速时的 FCP，Lighthouse 需要通过模拟计算的方式，得出在给定限速条件下的 FCP 估算值。接下来我们重点介绍 simulated 这种模拟方式下，FCP 的计算。&lt;/p&gt;
&lt;p&gt;上文我们提到在 Driver 模块中有个 NetworkRecorder，这个模块会记录页面加载过程中的所有网络请求详情，Lighthouse 会为每个有效的网络请求事件建立一个对应的 Network Node 节点。&lt;/p&gt;
&lt;p&gt;Trace 信息中也会记录页面加载过程中 CPU 执行事件，Lighthouse 会为每个有效的 CPU 事件建立一个对应的 CPU Node 节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/0X559jq5We58R_Evxfudzg==/109951164432376568.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;紧接着，Lighthouse 会从 Network 请求节点中找出根节点（请求 Document 的节点），并根据节点依赖算法，建立起 CPU 节点与 Network 节点之间的依赖，最终生成页面加载依赖的有向无环图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/8DpOfnsLMxJ1WC8_fLiVkg==/109951164464186053.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;建立了页面加载所需的完整依赖图后，Lighthouse 会结合 Trace 信息中的 FCP 事件时间，分析出页面 FCP 所需的的依赖图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/ISsY4ULcx5suJyAmFFDK4Q==/109951164432433536.png?imageView=1&amp;#x26;thumbnail=500x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;有了页面 FCP 所需的依赖图后，Lighthouse 模拟计算出，在限速条件下，请求依赖图中的资源，执行依赖图中的 CPU 事件，所需的耗时，以此得出在特定限速条件下的 FCP 估算值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/9Yb1szCkhGKqgU5vLtI1Uw==/109951164432437663.png?imageView=1&amp;#x26;thumbnail=750x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3&gt;模拟 HTTP 请求&lt;/h3&gt;
&lt;p&gt;Lighthouse 通过模拟 HTTP 的方式，计算出在特定网络条件下的资源下载耗时，而不是真实地发起网络请求，我们来看下 Lighthouse 是如何做模拟的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/ZdUR1vPSs8b75NgCmf0RQw==/109951164432467024.png?imageView=1&amp;#x26;thumbnail=750x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/R58QU2rjt5qZhdZ9uslBlw==/109951164432464625.png?imageView=1&amp;#x26;thumbnail=750x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上述的代码中，我们看到 Lighthouse 完全是通过模拟 HTTP 的方式，计算出了一个资源在特定网络条件下，所需要的耗时。并且这个模拟考虑了 HTTP2 多路复用技术、 请求是否 KeepAlive、TCP 三次握手、拥塞窗口等细节。&lt;/p&gt;
&lt;p&gt;我们用一张图来总结和对比一下，两种限速方式计算 FCP 的流程差异：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/t9h4x0Y0FCW6BqOq8Ogb2Q==/109951164432474551.png?imageView=1&amp;#x26;thumbnail=750x0&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看出两种限速方式，都是以 DevTools 给出的 Trace 信息为基础，在 Simulate 限速方式下，在拿到 FCP 值后，还需要模拟计算在限速条件下的估算值。在 Simulate 限速方式下，其他性能指标如 FMP、SpeedIndex 等也是通过类似的方式进行模拟计算，至此我们分析完了 Lighthouse 性能指标 FCP 审计项的实现原理。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本篇文章为大家简要介绍了 Lighthouse、并分析了 Lighthouse 的测试流程与主要的模块实现，最后向大家介绍了关键性能指标 FCP 的模拟计算方式，希望能对大家有所收获。文末会贴出文章中提到的模块的源码导航，有兴趣的朋友可以看下，欢迎大家进行交流。&lt;/p&gt;
&lt;h2&gt;源码导航&lt;/h2&gt;
&lt;h3&gt;Driver 模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/driver.js&quot;&gt;driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/connections/cri.js&quot;&gt;connection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/emulation.js&quot;&gt;emulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/network-recorder.js&quot;&gt;network-recorder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Gatherer模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gather-runner.js&quot;&gt;gather-runner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gatherers/gatherer.js&quot;&gt;gatherer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gatherers/runtime-exceptions.js&quot;&gt;runtime-exceptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Audit模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/audits/audit.js&quot;&gt;audit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/tree/master/lighthouse-core/audits&quot;&gt;error-in-console&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;FCP计算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f8653d66766815fb5ff4f125878cc28/lighthouse-core/audits/metrics/first-contentful-paint.js&quot;&gt;audit/fcp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/first-contentful-paint.js&quot;&gt;computed/fcp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/lantern-first-contentful-paint.js&quot;&gt;computed/lantern-fcp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/lantern-metric.js&quot;&gt;computed/lantern-metric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/page-dependency-graph.js&quot;&gt;computed/page-dependency-graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/lib/dependency-graph/base-node.js&quot;&gt;dependency-graph/base-node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/lib/dependency-graph/simulator/tcp-connection.js&quot;&gt;dependency-graph/tcp-connection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f8653d66766815fb5ff4f125878cc28/docs/architecture.md&quot;&gt;Lighthouse-architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/v3/scoring&quot;&gt;Lighthouse Scoring Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[前端性能监控平台-存储与计算架构展望]]></title><description><![CDATA[前言 本文首先介绍网易云音乐自研前端性能监控平台的架构现状和当前遇到的问题。随后介绍了NTSDB存储引擎可以解决的问题，并进一步给出更符合业界标准的监控平台存储与计算架构。文中NTSDB…]]></description><link>https://kkdev163.github.io/apm-storage/</link><guid isPermaLink="false">https://kkdev163.github.io/apm-storage/</guid><pubDate>Thu, 28 Mar 2019 10:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;本文首先介绍网易云音乐自研前端性能监控平台的架构现状和当前遇到的问题。随后介绍了NTSDB存储引擎可以解决的问题，并进一步给出更符合业界标准的监控平台存储与计算架构。文中NTSDB与业界通用架构主要是根据网易数据科学中心时序数据库领域专家-&lt;a href=&apos;http://hbasefly.com/author/libisthanksgmail-com/&apos; target=&apos;_blank&apos;&gt;范欣欣&lt;/a&gt;给出的建议整理而来。&lt;/p&gt;
&lt;h3&gt;当前架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/tBao5AUpLEFlGenlxk4y0A==/109951163959092198.png&quot; alt=&quot;image&quot;&gt;
浏览器端SDK采集的性能数据会经过Nginx负载均衡到NodeJS服务器, NodeJS服务器对上报数据做合法校验后, 直接将原始数据转发至InfluxProxy,InfluxProxy根据配置将数据按表分片至底层的InfluxDB节点。&lt;/p&gt;
&lt;h4&gt;Influx Proxy的集群的优势&lt;/h4&gt;
&lt;p&gt;当前我们的存储与计算架构的实现主要是依赖于InfluxProxy、InfluxDB所构成的计算存储集群。InfluxProxy为饿了么开源的&lt;a href=&quot;https://github.com/shell909090/influx-proxy&quot;&gt;组件&lt;/a&gt;,主要提供了以下的功能：&lt;/p&gt;
&lt;h5&gt;1.按measurement(数据库表名)做分片。&lt;/h5&gt;
&lt;p&gt;Proxy节点中会维护DB节点与measurement的映射关系,根据该配置，可将同一个数据库的表存入不同的DB节点, 以达到横向扩展的目的。配置示意如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        db1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db3&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;2. 数据备份能力。&lt;/h5&gt;
&lt;p&gt;InfluxDB 提供replication参数设置副本数，但单机版的副本在同一主机上，无法做到高可用。若在proxy上将同一张表配置在多个DB节点，在数据存入时，Proxy会将数据写入多个DB节点，达到数据备份的目的，在读取时Proxy会选择其中一个DB节点取出数据，以实现influxDB节点的高可用并提高读取性能。配置示意如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        db1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;3. 写失败时，缓存重试能力。&lt;/h5&gt;
&lt;p&gt;当底层的DB节点挂掉时，Proxy节点会将数据先写入本地文件中，待DB节点恢复后，Proxy节点会将数据重新写入DB节点。&lt;/p&gt;
&lt;h5&gt;4. 高危查询语句过滤能力。&lt;/h5&gt;
&lt;p&gt;若查询语句中不通过where duration 指定查询范围, influx会将符合该查询的全部索引加载至内存中，会产生极大的性能开销。Proxy会过滤类似的高危查询语句。&lt;/p&gt;
&lt;h4&gt;当前架构存在的痛点&lt;/h4&gt;
&lt;h5&gt;1. Proxy节点当前无高可用&lt;/h5&gt;
&lt;p&gt;Proxy节点为整个存储与计算的入口, 若Proxy节点挂掉，性能监控的全部存储与计算服务就挂掉了。当然这个问题并非特别棘手，后续可以通过搭建多台Proxy, 由NodeJS端做负载均衡来解决该问题。&lt;/p&gt;
&lt;h5&gt;2. Proxy是对读写请求做了一层代理，非master slave集群模式&lt;/h5&gt;
&lt;p&gt;Proxy节点维护了表与DB实例的映射关系，做了一层数据读写的代理。但像创建Petention Policy(数据保留过期策略)、创建Continue Query(持续查询)等无法做代理和同步，需要手动连接至DB节点进行管理。这样会存在什么问题呢？&lt;/p&gt;
&lt;p&gt;当只有一两个DB节点时, 这样手动管理并没有太大问题。但是当DB实例个数继续扩大后, 手动管理分片A实例、分片B实例、分片A副本实例、分片B副本实例, 若后续还有数据迁移，则CQ配置的管理将是一个噩梦。&lt;/p&gt;
&lt;h5&gt;3. 扩容和数据迁移成本高&lt;/h5&gt;
&lt;p&gt;由于Proxy是按照表进行数据的分片, 假设一开始只用到了Proxy提供的数据备份能力即按以下进行配置：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        db1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当接入的应用数逐步增加后, 一台db无法承载3张表的存储与计算开销。我们做扩容的工作,比如新申请2台机器，把table3、table4拆分到新的机器上。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        db1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db3&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db4&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;table4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了修改Proxy的配置，我们还需要将原本db1 db2 上的数据迁移到db3、db4上。并且把原本针对table3、table4的CQ配置也迁移到db3、db4。&lt;/p&gt;
&lt;h5&gt;4. 仅支持measurement层面的分片, 无法按数据分片&lt;/h5&gt;
&lt;p&gt;假设随着应用的增多，我们已经忍着剧痛，把数据拆成了这种地步：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        db1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db3&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        db4&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;table4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后我们又会遇到新的问题：table1撑满了。。现在我们除了升级db1的机器，再没有别的办法扩容了。&lt;/p&gt;
&lt;h3&gt;NTSDB&lt;/h3&gt;
&lt;p&gt;NTSDB为网易数据科学中心基于Influx自研的时序数据库。基本架构示意如下：
&lt;img src=&quot;https://p1.music.126.net/249sryZCD3i2-6gdvlJtAQ==/109951163959223735.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;集群拥有3台master节点, 负责接收数据读写请求、同步数据库管理配置如创建Petention Policy(数据保留过期策略)、创建Continue Query(持续查询), master节点非常轻量。实际的存储与计算任务由Shard Server进行。&lt;/p&gt;
&lt;h4&gt;Influx存储模型简介&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/aMzLd3vJJGPydkRsUWQFYw==/109951163959253224.png&quot; alt=&quot;image&quot;&gt;
在一张Influx数据库之上可以创建任意多个Rentention Policy(数据保留策略), 一个RP可以&lt;a href=&quot;https://docs.influxdata.com/influxdb/v1.7/query_language/database_management/#create-retention-policies-with-create-retention-policy&quot;&gt;配置&lt;/a&gt;如下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DURATION: 数据过期时间, 过期后的数据自动删除。&lt;/li&gt;
&lt;li&gt;REPLICATION: 副本数。&lt;/li&gt;
&lt;li&gt;SHARD DURATION: shard group的持续时长, 持续时间结束后会形成新的ShardGroup.&lt;/li&gt;
&lt;li&gt;SHARD BUCKET: 每个Shard Group包含的Shard个数。Influx DB单机版未提供该参数(默认为1)、NTSDB提供该配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例来说当配置 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$CREATE&lt;/span&gt; RETENTION POLICY &lt;span class=&quot;token string&quot;&gt;&quot;rp_only_week&quot;&lt;/span&gt; ON &lt;span class=&quot;token string&quot;&gt;&quot;wapm&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
DURATION 7d &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
REPLICATION 2 &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
SHARD DURATION 1d  &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
SHARD BUCKET 3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们创建了一个名为&lt;code class=&quot;language-text&quot;&gt;rp_only_week&lt;/code&gt;的RP, 其数据最长保留7天，副本数为2个，ShardGroup的持续时间为1天, 每个ShardGroup含有3个Shard。&lt;/p&gt;
&lt;p&gt;存入数据时是可以指定RP(未指定时有默认RP), 我们可以将上报的原始数据存入7天的RP内, 将聚合过后的数据，存入一年过期的RP内。数据的过期，不是将每一条记录的时间与duration做对比，而是判断一个ShardGroup内的最新的数据是否已经过期，如果最新一条记录都过期了，则整个ShardGroup内的数据做批量删除，效率非常高。&lt;/p&gt;
&lt;p&gt;当有数据存入时，influx 会将数据的measurement + tagKey1 + tagValue1 + tagKey2 + tagValue2 +… 形成SeriesKey, 并将SeriesKey 做hash运算后存入某个shard内。同一个ShardGroup内 Shard个数越多，读写性能越高。可以将Shard理解为Influx实际做存储与计算引擎。&lt;/p&gt;
&lt;p&gt;回头来看下NTSDB的架构：
&lt;img src=&quot;https://p1.music.126.net/249sryZCD3i2-6gdvlJtAQ==/109951163959223735.png&quot; alt=&quot;image&quot;&gt;
一个数据库的数据可分为多个shard落到不同的ShardServer上，每个shard都有自己的副本，存到不同的主机上，以保证高可用。并且我们可以横向无限地增加ShardServer的个数，当一台ShardServer无法承担一个Shard的压力时，我们可以调整SHARD BUCKET的数量，让数据均摊到其他节点。而节点的保活、备份、Petention Policy(数据保留过期策略)、Continue Query(持续查询)的管理都可以只连接到一台master上进行管理，master节点会自动同步给其他节点。&lt;/p&gt;
&lt;p&gt;可以说NTSDB完美地解决了我们当前存储架构的痛点。&lt;/p&gt;
&lt;h3&gt;标准架构&lt;/h3&gt;
&lt;p&gt;我们当前的架构可以简单抽象为如下流程：
&lt;img src=&quot;https://p1.music.126.net/FDMpSUh5Cb-oPSOydP5fbQ==/109951163959325299.png&quot; alt=&quot;image&quot;&gt;
我们将所有的原始数据存入Influx, 并在Influx上建立CQ做预聚合计算，以提高查询性能。&lt;/p&gt;
&lt;p&gt;在此架构之上，我们计划再进一步，引进业界更为通用的存储计算架构：
&lt;img src=&quot;https://p1.music.126.net/SsF26FVK5sqc8xhWz1a4fw==/109951163959336654.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们引入Kafka来做消息队列，有如下几点好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原本Server直接对Influx, Influx若挂掉，则这段时间内的数据就会完全丢失。引入消息队列后，数据可以先入队，后消费。&lt;/li&gt;
&lt;li&gt;可应对高峰流量，高峰流量不常有，如果为了高峰流量而一直预备着高配机器，多少会是一种浪费，而引入kafka，influx就不需要有完全匹配高峰流量的配置，高峰时可在kafka先缓存，待高峰过后，逐步消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;引入Flink做聚合计算，有如下几点好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更专业, 大数据分布式计算平台，提供更多的聚合函数，通过写SQL就可以完成聚合任务配置。&lt;/li&gt;
&lt;li&gt;更灵活, 未提供的聚合函数，可通过开发JAR包的方式，灵活自定义配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网易云音乐基于Flink自研的&lt;a href=&quot;https://music-rtfm.hz.netease.com/magina-doc/&quot;&gt;Magina平台&lt;/a&gt;可简化Flink的使用，让大数据计算更加亲民。&lt;/p&gt;
&lt;p&gt;文末再次感谢网易数据科学中心-时序数据库领域专家-&lt;a href=&apos;http://hbasefly.com/author/libisthanksgmail-com/&apos; target=&apos;_blank&apos;&gt;范欣欣&lt;/a&gt;，对云音乐前端性能监控平台的架构改进提出的宝贵建议。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.influxdata.com/influxdb/v1.7/query_language/database_management/#create-retention-policies-with-create-retention-policy&quot;&gt;Influx Db文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitbook.cn/books/59428f6f7e850f039399fd02/index.html&quot;&gt;刘平：饿了么Influxdb 实战解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hbasefly.com/2017/12/08/influxdb-1/&quot;&gt;范欣欣-时序数据库技术体系 - 初识InfluxDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hbasefly.com/2018/01/13/timeseries-database-4/&quot;&gt;范欣欣-时序数据库技术体系 - InfluxDB TSM存储引擎之TSMFile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hbasefly.com/2018/02/09/timeseries-database-5/&quot;&gt;范欣欣-时序数据库技术体系 - InfluxDB 多维查询之倒排索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kms.netease.com/#/article/5933&quot;&gt;范欣欣-网易时序数据库，丰富你的技术栈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Sentry平台-为Docker Swarm集群添加SSHFS分布式文件存储]]></title><description><![CDATA[前言 本文首先介绍了网易云音乐私有化部署的Sentry平台系统架构和当前业务上遇到的分布式存储问题，最后给出搭建SSHFS存储环境解决该问题的实现步骤。 Sentry架构 
当前Sentry平台的部署采用了三台宿主机构成的Docker Swarm集群。Docker…]]></description><link>https://kkdev163.github.io/sshfs/</link><guid isPermaLink="false">https://kkdev163.github.io/sshfs/</guid><pubDate>Thu, 28 Mar 2019 09:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;本文首先介绍了网易云音乐私有化部署的Sentry平台系统架构和当前业务上遇到的分布式存储问题，最后给出搭建SSHFS存储环境解决该问题的实现步骤。&lt;/p&gt;
&lt;h3&gt;Sentry架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/khgxZ3hwssENM7Y8gJ--1Q==/109951163959632735.png&quot; alt=&quot;image&quot;&gt;
当前Sentry平台的部署采用了三台宿主机构成的Docker Swarm集群。Docker容器内运行的WSGI可理解为错误事件的生产者进程, Redis理解为消息队列，Celery worker为错误事件的消费进程。&lt;/p&gt;
&lt;h3&gt;遇到的问题&lt;/h3&gt;
&lt;p&gt;Sentry平台提供根据SourceMap解析混淆代码的能力, 比如原始收集到的错误如下：
&lt;img src=&quot;https://p1.music.126.net/c5ZHOyvdcvZnAD1eAuaqcA==/109951163895796415.jpg&quot; alt=&quot;image&quot;&gt;
通过SourceMap解析后：
&lt;img src=&quot;https://p1.music.126.net/lLtnyXr7IJ6Yj_NZXRrKkw==/109951163895799468.png&quot; alt=&quot;image&quot;&gt;
为了保证源代码的安全，sentry提供了&lt;a href=&quot;https://docs.sentry.io/platforms/node/sourcemaps/&quot;&gt;Webpack插件&lt;/a&gt;，可将打包后的js文件及sourceMap文件提前上传至Sentry后台，在后续收到错误上报时直接从文件系统中读取js及map文件。&lt;/p&gt;
&lt;p&gt;Sentry提供了一层filestore抽象配置，用于文件的存储。默认配置下，是写本地磁盘，官网是不建议在生产环境使用的。除此之外Sentry还提供了Google Cloud Storage、Amazon S3 Backend的配置，类似于网易的NOS存储服务。&lt;/p&gt;
&lt;h4&gt;直接写本地磁盘会遇到的问题？&lt;/h4&gt;
&lt;p&gt;如下图所示意：当进行文件上传时，Nginx会随机负载到一台机器上，如宿主机A。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/eRzeeTxkCi0R5km0NaCTMA==/109951163894174028.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;当前端产生错误上报时，请求可能会是由宿主机C上的消费容器进行处理。消费进程尝试从文件系统中读取js及map文件，由于无法读取到，此次解析就会失败，展示的还是混淆后的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/txq_IEYwOJsWv78B7gRpFw==/109951163894172228.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;网上有通过NFS来让跨主机的Docker集群进行文件共享的&lt;a href=&quot;https://www.jianshu.com/p/0d59bc614baa?utm_source=oschina-app&quot;&gt;方案&lt;/a&gt;，示意图如下：
&lt;img src=&quot;https://p1.music.126.net/YTdUvXsEA4xdTnnS8fu01g==/109951163894176686.png&quot; alt=&quot;image&quot;&gt;
搭建前想找PE同事讨论下能否可以协助搭建，还有方案潜在的风险，PE评估后觉得NFS的方案比较老，不太稳定，不建议去使用。&lt;/p&gt;
&lt;p&gt;与同事们讨论后可能的解决方案有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方案一: 将三台云主机迁移至 单台物理机上，但是存在单点的问题，并且后续无法扩展。(这可能是最快的方案)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方案二: sentry提供了亚马逊s3及谷歌云存储的配置，可以参考这两个存储的&lt;a href=&quot;https://github.com/getsentry/sentry/tree/master/src/sentry/filestore&quot;&gt;实现&lt;/a&gt;，扩展一个NOS的实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方案三: 搭建SSHFS存储方案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终评估后，我们采取了SSHFS的解决方案。下文对该方案的环境搭建做介绍。&lt;/p&gt;
&lt;h3&gt;SSHFS&lt;/h3&gt;
&lt;h4&gt;首先提供最权威的搭建参考文档：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/storage/volumes/#use-a-volume-driver&quot;&gt;Docker volume driver文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vieux/docker-volume-sshfs&quot;&gt;docker-volume-sshfs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;搭建后的存储示意图：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://p1.music.126.net/R5-6tL4aQ6Yl34TwistODw==/109951163959706351.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4&gt;搭建步骤：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;三台机器建立ssh互访&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请一个互访的公共账号&lt;/li&gt;
&lt;li&gt;本地创建公私钥对, 可由sa协助将公私钥添加至三台机器&lt;/li&gt;
&lt;li&gt;验证3台机器可任意进行ssh免密互访&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装插件
每台机器都需要安装&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$docker plugin install vieux/sshfs sshkey.source=/home/sentry/.ssh/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建数据卷
每台机器都需要安装&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$docker volume create -d vieux/sshfs -o sshcmd=sentry@hzabj-music-xxxx-machine3:/home/sentry/data 
-o port=1046 -o uid=999,gid=999 -o allow_other sshvolume&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中uid=999,gid=999 为Sentry的Docker镜像内用户id, 需要登录Sentry容器内检查是否一致，若不一致则修改为Sentry容器内的uid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试
在machine1上运行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$docker run -it --rm  -v sshvolume:/tmp:nocopy sentrybox /bin/bash
$touch testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上我们在/tmp文件夹加下创建了testfile，不出意外的话，在machine3的/home/sentry/data文件夹内会同步出现该文件，验证文件共享成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申请一块额外的硬盘，将该硬盘作为共享的数据存储盘
例如申请的新硬盘挂载在 /srv/nbs/0/目录下，则&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$cd /srv/nbs/0/
$mkdir -p ./home/sentry/data
$mount --bind ./home/sentry/data /home/sentry/data/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行此操作后，/home/sentry/data/文件夹下的文件会存入新的硬盘。而/home/sentry/data/目录，为我们在第二步创建数据卷时指定的共享目录。经过以上配置，三台机器挂载sshvolume后存入的文件，都会落入新的硬盘，达到文件共享的目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Docker Swarm集群中使用
需要在docker-compose.yml文件内配置sshfsvolume, 具体使用可参考以下配置:
&lt;img src=&quot;https://p1.music.126.net/ZJd6j-m2_VAF0mgCy_SKCw==/109951163959774896.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是若修改docker-compose.yml后，直接deploy失败的话，需要先执行 docker stack rm 将已有service移除&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$docker stack rm xxx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再执行一次&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$docker stack deploy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此为Docker swarm集群添加sshfs文件共享存储环境搭建完成。&lt;/p&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;p&gt;根据官网权威文档进行操作时，遇到了一些坑，解决遇到问题的参考的文献如下：&lt;/p&gt;
&lt;h4&gt;solution&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vieux/docker-volume-sshfs&quot;&gt;https://github.com/vieux/docker-volume-sshfs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/storage/volumes/#use-a-volume-driver&quot;&gt;https://docs.docker.com/storage/volumes/#use-a-volume-driver&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;ssh [public_key]&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/li528405176/article/details/82810342&quot;&gt;https://blog.csdn.net/li528405176/article/details/82810342&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/rabit87/article/details/79705163&quot;&gt;https://blog.csdn.net/rabit87/article/details/79705163&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zyf2333/article/details/80373502&quot;&gt;https://blog.csdn.net/zyf2333/article/details/80373502&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linuxquestions.org/questions/linux-software-2/sshfs-how-to-find-out-cause-of-read-connection-reset-by-peer-message-4175614683/&quot;&gt;https://www.linuxquestions.org/questions/linux-software-2/sshfs-how-to-find-out-cause-of-read-connection-reset-by-peer-message-4175614683/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;chown permission deied [nocopy]&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vieux/docker-volume-sshfs/issues/41&quot;&gt;https://github.com/vieux/docker-volume-sshfs/issues/41&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/docker/docker.github.io/issues/2992&quot;&gt;https://github.com/docker/docker.github.io/issues/2992&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/run/&quot;&gt;https://docs.docker.com/engine/reference/run/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;permission [allow_other]&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/146544/chown-permission-denied-on-owned-dir&quot;&gt;https://unix.stackexchange.com/questions/146544/chown-permission-denied-on-owned-dir&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=1961204&quot;&gt;https://ubuntuforums.org/showthread.php?t=1961204&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/37168/unable-to-use-o-allow-other-with-sshfs-option-enabled-in-fuse-conf&quot;&gt;https://unix.stackexchange.com/questions/37168/unable-to-use-o-allow-other-with-sshfs-option-enabled-in-fuse-conf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/222944/mount-with-sshfs-and-write-file-permissions&quot;&gt;https://unix.stackexchange.com/questions/222944/mount-with-sshfs-and-write-file-permissions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/docker/for-win/issues/497&quot;&gt;https://github.com/docker/for-win/issues/497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://forums.docker.com/t/volume-not-writable-to-non-root-user-container/36103/3&quot;&gt;https://forums.docker.com/t/volume-not-writable-to-non-root-user-container/36103/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=2036686&quot;&gt;https://ubuntuforums.org/showthread.php?t=2036686&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;compose [syntax]&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vieux/docker-volume-sshfs/issues/48&quot;&gt;https://github.com/vieux/docker-volume-sshfs/issues/48&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vieux/docker-volume-sshfs/issues/65&quot;&gt;https://github.com/vieux/docker-volume-sshfs/issues/65&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/getsentry/docker-sentry/blob/master/9.0/Dockerfile&quot;&gt;https://github.com/getsentry/docker-sentry/blob/master/9.0/Dockerfile&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>